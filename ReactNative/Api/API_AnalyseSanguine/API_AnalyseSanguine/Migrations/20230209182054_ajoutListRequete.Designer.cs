// <auto-generated />
using System;
using API_AnalyseSanguine.Context.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_AnalyseSanguine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230209182054_ajoutListRequete")]
    partial class ajoutListRequete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_AnalyseSanguine.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hémostase"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hématologie"
                        });
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Dossier", b =>
                {
                    b.Property<int>("IdDossier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDossier"), 1L, 1);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sexe")
                        .HasColumnType("tinyint");

                    b.HasKey("IdDossier");

                    b.ToTable("Dossiers");

                    b.HasData(
                        new
                        {
                            IdDossier = 1,
                            DateNaissance = new DateTime(2001, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Turgeon",
                            Prenom = "Victor",
                            Sexe = (byte)0
                        },
                        new
                        {
                            IdDossier = 2,
                            DateNaissance = new DateTime(2002, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Belval",
                            Prenom = "Jean-Philippe",
                            Sexe = (byte)0
                        });
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Medecin", b =>
                {
                    b.Property<int>("IdMedecin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedecin"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedecin");

                    b.ToTable("Medecins");

                    b.HasData(
                        new
                        {
                            IdMedecin = 1,
                            Nom = "Banville",
                            Prenom = "Zacharie"
                        },
                        new
                        {
                            IdMedecin = 2,
                            Nom = "Bourque",
                            Prenom = "Yannick"
                        },
                        new
                        {
                            IdMedecin = 3,
                            Nom = "Langlais",
                            Prenom = "Jonathan"
                        },
                        new
                        {
                            IdMedecin = 4,
                            Nom = "Jetté",
                            Prenom = "Antony"
                        },
                        new
                        {
                            IdMedecin = 5,
                            Nom = "Denis",
                            Prenom = "Lucas"
                        },
                        new
                        {
                            IdMedecin = 6,
                            Nom = "Lagacé",
                            Prenom = "Mathilde"
                        },
                        new
                        {
                            IdMedecin = 7,
                            Nom = "Néron",
                            Prenom = "Alicia"
                        },
                        new
                        {
                            IdMedecin = 8,
                            Nom = "Godin",
                            Prenom = "Raphaelle"
                        },
                        new
                        {
                            IdMedecin = 9,
                            Nom = "Martinez",
                            Prenom = "Leonie"
                        },
                        new
                        {
                            IdMedecin = 10,
                            Nom = "Daneau",
                            Prenom = "Rose"
                        });
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.Property<int>("IdRequete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequete"), 1L, 1);

                    b.Property<string>("AnalyseDemande")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CodeAcces")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEchantillon")
                        .HasColumnType("datetime2");

                    b.Property<int>("DossierIdDossier")
                        .HasColumnType("int");

                    b.Property<int>("MedecinIdMedecin")
                        .HasColumnType("int");

                    b.Property<string>("NomTechnicien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRequete");

                    b.HasIndex("DossierIdDossier");

                    b.HasIndex("MedecinIdMedecin");

                    b.ToTable("RequeteAnalyses");

                    b.HasData(
                        new
                        {
                            IdRequete = 1,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("0b601165-9117-406b-ad35-33ecbf0d93bd"),
                            DateEchantillon = new DateTime(2022, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 1,
                            MedecinIdMedecin = 1,
                            NomTechnicien = "Matheo Boudreau"
                        },
                        new
                        {
                            IdRequete = 2,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("dd0481f0-5d8b-474a-b1ce-c4890149c2e6"),
                            DateEchantillon = new DateTime(2017, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 1,
                            MedecinIdMedecin = 7,
                            NomTechnicien = "Jerome Frenette"
                        },
                        new
                        {
                            IdRequete = 3,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("136006e3-f889-48ac-9908-a90bacd9aba6"),
                            DateEchantillon = new DateTime(2001, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 1,
                            MedecinIdMedecin = 3,
                            NomTechnicien = "Clara Faubert"
                        },
                        new
                        {
                            IdRequete = 4,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("ff47bc6a-efdd-4fda-88f1-3b7c90bd971c"),
                            DateEchantillon = new DateTime(2014, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 2,
                            MedecinIdMedecin = 10,
                            NomTechnicien = "Louis Truchon"
                        },
                        new
                        {
                            IdRequete = 5,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("816319f1-a364-4fbe-a161-1784bcfca0cc"),
                            DateEchantillon = new DateTime(2006, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 2,
                            MedecinIdMedecin = 4,
                            NomTechnicien = "Andreanne Pearson"
                        },
                        new
                        {
                            IdRequete = 6,
                            AnalyseDemande = "",
                            CodeAcces = new Guid("1a2b9186-9318-4fb2-a651-1496cc367de5"),
                            DateEchantillon = new DateTime(2009, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DossierIdDossier = 2,
                            MedecinIdMedecin = 9,
                            NomTechnicien = "Sabrina Beauvais"
                        });
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.ResultatAnalyse", b =>
                {
                    b.Property<int>("IdResultatAnalyse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResultatAnalyse"), 1L, 1);

                    b.Property<int>("RequeteAnalyseIdRequete")
                        .HasColumnType("int");

                    b.Property<int>("TypeValeurIdTypeValeur")
                        .HasColumnType("int");

                    b.Property<float>("Valeur")
                        .HasColumnType("real");

                    b.HasKey("IdResultatAnalyse");

                    b.HasIndex("RequeteAnalyseIdRequete");

                    b.HasIndex("TypeValeurIdTypeValeur");

                    b.ToTable("ResultatAnalyses");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.Property<int>("IdTypeAnalyse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeAnalyse"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeAnalyse");

                    b.HasIndex("CategoryId");

                    b.ToTable("TypeAnalyses");

                    b.HasData(
                        new
                        {
                            IdTypeAnalyse = 18,
                            CategoryId = 1,
                            Nom = "TS"
                        },
                        new
                        {
                            IdTypeAnalyse = 19,
                            CategoryId = 1,
                            Nom = "To"
                        },
                        new
                        {
                            IdTypeAnalyse = 20,
                            CategoryId = 1,
                            Nom = "PTT"
                        },
                        new
                        {
                            IdTypeAnalyse = 21,
                            CategoryId = 1,
                            Nom = "PT"
                        },
                        new
                        {
                            IdTypeAnalyse = 22,
                            CategoryId = 1,
                            Nom = "TT"
                        },
                        new
                        {
                            IdTypeAnalyse = 23,
                            CategoryId = 1,
                            Nom = "Fibrinogène"
                        },
                        new
                        {
                            IdTypeAnalyse = 24,
                            CategoryId = 1,
                            Nom = "Facteur"
                        },
                        new
                        {
                            IdTypeAnalyse = 25,
                            CategoryId = 1,
                            Nom = "D-dimères"
                        },
                        new
                        {
                            IdTypeAnalyse = 26,
                            CategoryId = 1,
                            Nom = "fVW"
                        },
                        new
                        {
                            IdTypeAnalyse = 27,
                            CategoryId = 1,
                            Nom = "LA Screen"
                        },
                        new
                        {
                            IdTypeAnalyse = 28,
                            CategoryId = 1,
                            Nom = "Anti-Xa"
                        },
                        new
                        {
                            IdTypeAnalyse = 29,
                            CategoryId = 1,
                            Nom = "Prt C"
                        },
                        new
                        {
                            IdTypeAnalyse = 30,
                            CategoryId = 1,
                            Nom = "Prt S"
                        },
                        new
                        {
                            IdTypeAnalyse = 31,
                            CategoryId = 1,
                            Nom = "PLG"
                        },
                        new
                        {
                            IdTypeAnalyse = 32,
                            CategoryId = 1,
                            Nom = "AP"
                        },
                        new
                        {
                            IdTypeAnalyse = 33,
                            CategoryId = 2,
                            Nom = "FSC num."
                        },
                        new
                        {
                            IdTypeAnalyse = 34,
                            CategoryId = 2,
                            Nom = "Plt"
                        },
                        new
                        {
                            IdTypeAnalyse = 35,
                            CategoryId = 2,
                            Nom = "Micro"
                        },
                        new
                        {
                            IdTypeAnalyse = 36,
                            CategoryId = 2,
                            Nom = "VS"
                        },
                        new
                        {
                            IdTypeAnalyse = 37,
                            CategoryId = 2,
                            Nom = "FSC diff."
                        });
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeValeur", b =>
                {
                    b.Property<int>("IdTypeValeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeValeur"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeAnalyseIdTypeAnalyse")
                        .HasColumnType("int");

                    b.HasKey("IdTypeValeur");

                    b.HasIndex("TypeAnalyseIdTypeAnalyse");

                    b.ToTable("TypeValeurs");
                });

            modelBuilder.Entity("RequeteAnalyseTypeAnalyse", b =>
                {
                    b.Property<int>("LstTypeAnalyseIdTypeAnalyse")
                        .HasColumnType("int");

                    b.Property<int>("RequeteAnalysesIdRequete")
                        .HasColumnType("int");

                    b.HasKey("LstTypeAnalyseIdTypeAnalyse", "RequeteAnalysesIdRequete");

                    b.HasIndex("RequeteAnalysesIdRequete");

                    b.ToTable("RequeteAnalyseTypeAnalyse");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.Dossier", "Dossier")
                        .WithMany("LstRequetes")
                        .HasForeignKey("DossierIdDossier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_AnalyseSanguine.Models.Medecin", "Medecin")
                        .WithMany("LstRequetes")
                        .HasForeignKey("MedecinIdMedecin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.ResultatAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.RequeteAnalyse", "RequeteAnalyse")
                        .WithMany("LstResultats")
                        .HasForeignKey("RequeteAnalyseIdRequete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_AnalyseSanguine.Models.TypeValeur", "TypeValeur")
                        .WithMany()
                        .HasForeignKey("TypeValeurIdTypeValeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequeteAnalyse");

                    b.Navigation("TypeValeur");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeValeur", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.TypeAnalyse", "TypeAnalyse")
                        .WithMany("LstValeurs")
                        .HasForeignKey("TypeAnalyseIdTypeAnalyse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAnalyse");
                });

            modelBuilder.Entity("RequeteAnalyseTypeAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.TypeAnalyse", null)
                        .WithMany()
                        .HasForeignKey("LstTypeAnalyseIdTypeAnalyse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_AnalyseSanguine.Models.RequeteAnalyse", null)
                        .WithMany()
                        .HasForeignKey("RequeteAnalysesIdRequete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Dossier", b =>
                {
                    b.Navigation("LstRequetes");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Medecin", b =>
                {
                    b.Navigation("LstRequetes");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.Navigation("LstResultats");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.Navigation("LstValeurs");
                });
#pragma warning restore 612, 618
        }
    }
}
