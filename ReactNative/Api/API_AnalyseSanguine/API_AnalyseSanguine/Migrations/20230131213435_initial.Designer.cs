// <auto-generated />
using System;
using API_AnalyseSanguine.Context.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_AnalyseSanguine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230131213435_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_AnalyseSanguine.Models.Dossier", b =>
                {
                    b.Property<int>("IdDossier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDossier"), 1L, 1);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sexe")
                        .HasColumnType("tinyint");

                    b.HasKey("IdDossier");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Medecin", b =>
                {
                    b.Property<int>("IdMedecin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedecin"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedecin");

                    b.ToTable("Medecins");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.Property<int>("IdRequete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRequete"), 1L, 1);

                    b.Property<string>("AnalyseDemande")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CodeAcces")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEchantillon")
                        .HasColumnType("datetime2");

                    b.Property<int>("DossierIdDossier")
                        .HasColumnType("int");

                    b.Property<int>("MedecinIdMedecin")
                        .HasColumnType("int");

                    b.Property<string>("NomTechnicien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRequete");

                    b.HasIndex("DossierIdDossier");

                    b.HasIndex("MedecinIdMedecin");

                    b.ToTable("RequeteAnalyses");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.ResultatAnalyse", b =>
                {
                    b.Property<int>("IdResultatAnalyse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResultatAnalyse"), 1L, 1);

                    b.Property<int>("RequeteAnalyseIdRequete")
                        .HasColumnType("int");

                    b.Property<int>("TypeValeurIdTypeValeur")
                        .HasColumnType("int");

                    b.Property<float>("Valeur")
                        .HasColumnType("real");

                    b.HasKey("IdResultatAnalyse");

                    b.HasIndex("RequeteAnalyseIdRequete");

                    b.HasIndex("TypeValeurIdTypeValeur");

                    b.ToTable("ResultatAnalyses");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.Property<int>("IdTypeAnalyse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeAnalyse"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequeteAnalyseIdRequete")
                        .HasColumnType("int");

                    b.HasKey("IdTypeAnalyse");

                    b.HasIndex("RequeteAnalyseIdRequete");

                    b.ToTable("TypeAnalyses");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeValeur", b =>
                {
                    b.Property<int>("IdTypeValeur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeValeur"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeAnalyseIdTypeAnalyse")
                        .HasColumnType("int");

                    b.Property<string>("Unite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTypeValeur");

                    b.HasIndex("TypeAnalyseIdTypeAnalyse");

                    b.ToTable("TypeValeurs");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.Dossier", "Dossier")
                        .WithMany("LstRequetes")
                        .HasForeignKey("DossierIdDossier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_AnalyseSanguine.Models.Medecin", "Medecin")
                        .WithMany("LstRequetes")
                        .HasForeignKey("MedecinIdMedecin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.ResultatAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.RequeteAnalyse", "RequeteAnalyse")
                        .WithMany("LstResultats")
                        .HasForeignKey("RequeteAnalyseIdRequete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_AnalyseSanguine.Models.TypeValeur", "TypeValeur")
                        .WithMany()
                        .HasForeignKey("TypeValeurIdTypeValeur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequeteAnalyse");

                    b.Navigation("TypeValeur");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.RequeteAnalyse", null)
                        .WithMany("LstTypeAnalyse")
                        .HasForeignKey("RequeteAnalyseIdRequete");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeValeur", b =>
                {
                    b.HasOne("API_AnalyseSanguine.Models.TypeAnalyse", "TypeAnalyse")
                        .WithMany("LstValeurs")
                        .HasForeignKey("TypeAnalyseIdTypeAnalyse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAnalyse");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Dossier", b =>
                {
                    b.Navigation("LstRequetes");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.Medecin", b =>
                {
                    b.Navigation("LstRequetes");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.RequeteAnalyse", b =>
                {
                    b.Navigation("LstResultats");

                    b.Navigation("LstTypeAnalyse");
                });

            modelBuilder.Entity("API_AnalyseSanguine.Models.TypeAnalyse", b =>
                {
                    b.Navigation("LstValeurs");
                });
#pragma warning restore 612, 618
        }
    }
}
